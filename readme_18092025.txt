readme_18092025 (pilot “Siano AI”)

COS’È

“Siano AI” è una homepage comunale “viva” che:

racconta Siano (storia, galleria, festività);

elenca gli esercenti aderenti con pagine dedicate (QR);

integra un assistente AI che risponde usando dati locali (JSON).

È un pilot: low-cost (static hosting), modulare, facilmente estendibile.

TECNOLOGIE

Vite + React + TypeScript

Tailwind utility classes (classi inline, niente config custom)

Framer Motion (transizioni/AnimatePresence)

lucide-react (icone)

Netlify (hosting + Functions per endpoint AI “/.netlify/functions/ask”)

Dati in JSON statici in /public/data (home.json, venues.json, <slug>.json)

Facoltativo: VITE_AI_ENDPOINT per puntare a un endpoint AI esterno

ALBERATURA (semplificata)

public/

city/ (immagini/logo Comune)

data/

home.json (dati homepage comunale)

venues.json (open data esercenti)

<slug>.json (dati singolo esercente: menu/config/chat)

src/

App.tsx

main.tsx

HomePage.tsx (UI principale: HERO, tabs, scroll uniforme)

ChatWidget.tsx (chat Comune/esercente; CTA; quick replies)

SianoVenue.tsx (pagina cuore per gli esercenti; vedi sotto)

ai/

ask.ts ((opzionale) euristica server-side)

netlify/

functions/

ask.js|ts (endpoint AI: LLM o fallback server)

package.json, vite.config.ts

FILE/DATI CHIAVE

/public/data/home.json (Comune; struttura diversa dagli esercenti)

cityName, logoUrl, heroTitle, heroSubtitle, heroImages

about, festivities, project, pilot, gallery

openData (link JSON/CSV esercenti)

social, footer, theme (accent cobalto uniforme)

assistant: enabled, label, panelTitle, slugForQA (“home”), initialMessage

chat:

quickReplies (bottoni rapidi)

faq (Q/A fisse)

ctas (array di link, es. Sito, Open Data) -> mostrate nel ChatWidget

NON contiene “config.phone/whatsapp/mapUrl”: le CTA “Chiama/Indicazioni” NON vengono mostrate qui a meno che non siano presenti in chat.ctas.

/public/data/<slug>.json (Esercente)

config: name, hours, address, phone, whatsapp, mapUrl, assistantLabel

story: descrizione

menu: specials, categories[].items[] con price/tags/fav

chat: quickReplies, faq, ctas (opzionali)

se mancano chat.ctas, il ChatWidget ricava CTA da config (Chiama/WhatsApp/Indicazioni)

COMPONENTI PRINCIPALI

HomePage.tsx

Carica home.json e venues.json.

Applica tema (blu cobalto), favicon, titolo pagina.

Sezioni/tabs: “Siano”, “Progetto pilota”, “Esercenti”.

Scroll “best-practice”: header sticky misura altezza, imposta scroll-padding-top e lo scroll avviene dopo l’animazione della sezione, così la posizione è identica per tutti i tab (niente “pezzi di HERO” visibili).

Galleria: card con bordo + hover dolce.

Festività & Tradizioni: mostra 3 elementi, “Mostra tutte/meno”, shuffle deterministico una sola volta se >=6.

Monta ChatWidget con slug=“home”.

SianoVenue.tsx (CUORE DELLE PAGINE ESERCENTI)

Prende lo “slug” dalla route (es. /il-pirata).

Carica /public/data/<slug>.json.

Renderizza intestazione con logo/nome, eventuale story/descrizione.

Mostra menu/catalogo: categorie + items (prezzo, tag, “fav”).

Espone CTA “Chiama”, “WhatsApp”, “Indicazioni” usando config (phone, whatsapp, mapUrl) oppure chat.ctas, con stile coerente (pill bianche col bordo + bottoni accent).

Monta il ChatWidget passando lo stesso slug: la chat risponde usando i dati dell’esercente.

ChatWidget.tsx

Carica data/<slug>.json in client.

Prova prima l’endpoint AI (/.netlify/functions/ask o VITE_AI_ENDPOINT).

Se non risponde: fallback locale in client (topic/faq, risposte basiche su orari/indirizzo/servizi).

CTA:

priorità: props.ctas > json.chat.ctas > (config-derivate) > []

per il Comune (slug “home”): usa chat.ctas (es. “Sito”, “Open Data”).

per gli esercenti: se chat.ctas mancano, genera da config (Chiama/WhatsApp/Indicazioni).

Colori: usa var CSS di tema (“--accent” cobalto); stile uniforme con le pagine esercenti.

netlify/functions/ask.js|ts

Endpoint AI server: può interrogare un LLM o fare fallback server-side.

Non essenziale per il pilot (esiste già fallback lato client).

UX/SCELTE

Tabs con scroll stabile (niente salti/ancoraggi imprecisi).

HERO pulito: titolo, sottotitolo, immagine contenuta (no crop eccessivo).

Cobalto uniforme su FAB chat, tab attivi, badge e bottoni accent.

Per il Comune, CTA sono SOLO quelle definite in home.json > chat.ctas.

COMANDI (sviluppo/deploy)

Install: npm ci

Dev: npm run dev

Build: npm run build

Preview: npm run preview

Netlify:

Build command: npm run build

Publish dir: dist

Functions: netlify/functions

(Opz.) Env: VITE_AI_ENDPOINT (se vuoi ignorare la Function Netlify)

PRESENTAZIONE AL COMUNE (checklist)

Demo online (Netlify) + QR.

Slide 10-12:

obiettivi, cosa fa la homepage, schede esercenti, chat;

benefici (cittadini, esercenti, Comune);

governance (chi aggiorna) e costi;

roadmap (pilot → estensione).

One-pager PDF non tecnico (riassunto + contatti).

Piano contenuti minimi per partire (foto, testo, orari; 3-5 esercenti).

Linee guida (tono istituzionale chat, privacy note).

Open Data (venues.json/csv) da mostrare per trasparenza/riuso.

Accessibilità (mobile-first, contrasto, font).

REFERENTI/STAKEHOLDER

Sindaco / Assessore Innovazione (sponsorship)

CED/URP/Comunicazione (aggiornamenti contenuti)

Ufficio Attività Produttive (coinvolgimento esercenti)

DPO/Segretario (privacy, se in futuro si gestiscono dati personali)

POST-MERGE (subito operativo)

Verificare che la chat del Comune mostri SOLO le CTA da home.json (Sito, Open Data).

Ricontrollare scroll tab “Esercenti -> Siano/Pilota” al primo click (fissato).

Rivedere uniformità blu cobalto su FAB/tab/badge/CTA.

TO-DO PER IL PILOT (dev)

Ampliare chat.faq del Comune (orari uffici, contatti istituzionali, link utili).

Aggiungere sezione “Eventi” (JSON + card, Mostra tutte/meno).

Script di validazione JSON (URL, campi obbligatori, prezzi numerici).

(Facolt.) Unificare il fallback server+client in un modulo shared.

DOPO IL PILOT (scaling)

Onboarding esercenti: modello JSON + guida 1 pagina.

Mini-backoffice (anche Google Sheet -> build statico).

Dominio/branding comunale.

Analytics privacy-first (Plausible/Umami).

DPIA/Note privacy se si estende la chat a servizi con dati personali.

BRIEF RAPIDO PER NUOVA CHAT (incolla all’inizio)
“Sto lavorando al pilot ‘Siano AI’: React/TypeScript (Vite), ChatWidget e dati in JSON (home.json per il Comune; <slug>.json per ogni esercente). La home usa tabs con scroll stabile e tema cobalto; l’assistente legge i dati dal JSON dello slug e mostra CTA da chat.ctas (Comune) o da config (esercenti). Hosting Netlify + Functions per ‘ask’. Chiedo aiuto pratico (bugfix, UX, JSON, Netlify Functions) senza regressioni.”

NOTE

node_modules è già in .gitignore.

Su Windows, errori EPERM durante “npm ci” sono tipici di file lock da antivirus/editor (chiudere, riprovare).

Se “tsc” non è riconosciuto, assicurarsi che “npm run build” usi Vite e che “typescript” sia in devDependencies.

OWNER/STATUS

Owner: Davide Romano (Ing. Informatica, Accenture, Milano).

Stato: pilot online su Netlify. Prossimi step: presentazione al Comune, feedback, onboarding 3-5 esercenti.